{
	"name": "Stage2_Sales_Shipment_Line_DF",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "Transaction_Full_Load_Folder",
						"type": "LinkedServiceReference"
					},
					"name": "salesshipmentline"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "curated_data",
						"type": "LinkedServiceReference"
					},
					"name": "salesshipmentlinesink",
					"rejectedDataLinkedService": {
						"referenceName": "curated_data",
						"type": "LinkedServiceReference"
					}
				}
			],
			"transformations": [
				{
					"name": "renamingcolums"
				},
				{
					"name": "cleaningdata"
				}
			],
			"scriptLines": [
				"parameters{",
				"     Container_Name as string ('curated-data'),",
				"     Folder_Name as string ('Sales_Shipment/Sales_Shipment_Line')",
				"}",
				"source(useSchema: false,",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delimited',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: false) ~> salesshipmentline",
				"salesshipmentline select(mapColumn(",
				"          Amount,",
				"          InvoiceNo,",
				"          Sell_to_Customer_No_ = {Sell-to Customer No_},",
				"          Document_Date = {Document Date},",
				"          Bill_to_Customer_No_ = {Bill-to Customer No_},",
				"          Type,",
				"          No_,",
				"          SLineNo,",
				"          Location_Code = {Location Code},",
				"          Shipment_Date = {Shipment Date},",
				"          Description,",
				"          Description_2 = {Description 2},",
				"          Unit_of_Measure = {Unit of Measure},",
				"          Quantity,",
				"          Quantity_Base = {Quantity (Base)},",
				"          Qty_per_Unit_of_Measure = {Qty_ per Unit of Measure},",
				"          Discount_Structure_Code = {Discount Structure Code},",
				"          Unit_Price = {Unit Price},",
				"          Unit_Cost_LCY = {Unit Cost (LCY)},",
				"          Unit_of_Measure_Code = {Unit of Measure Code},",
				"          ItemCategry,",
				"          Free_Supply = {Free Supply},",
				"          Discount_Structure_Amount = {Discount Structure Amount},",
				"          Conversion_Cost = {Conversion Cost},",
				"          PVC_PPR_Cost = {PVC_PPR Cost},",
				"          Scheme_Reason = {Scheme Reason},",
				"          Tax_Group_Code = {Tax Group Code},",
				"          Excise_Amount = {Excise Amount},",
				"          Total_GST_Amount = {Total GST Amount}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> renamingcolums",
				"renamingcolums derive(Amount = toDouble(iifNull(Amount,toString(null()))),",
				"          InvoiceNo = iifNull(InvoiceNo,toString(null())),",
				"          Sell_to_Customer_No_ = iifNull(Sell_to_Customer_No_,toString(null())),",
				"          Document_Date = toTimestamp(Document_Date,'dd/MM/yyyy hh:mm:ss a','UTC','yyyy-MM-dd hh:mm:ss a'),",
				"          Bill_to_Customer_No_ = iifNull(Bill_to_Customer_No_,toString(null())),",
				"          Type = toInteger(iifNull(Type,toString(null()))),",
				"          No_ = iifNull(No_,toString(null())),",
				"          SLineNo = toInteger(iifNull(SLineNo,toString(null()))),",
				"          Location_Code = iifNull(Location_Code,toString(null())),",
				"          Shipment_Date = toTimestamp(Shipment_Date,'dd/MM/yyyy hh:mm:ss a','UTC','yyyy-MM-dd hh:mm:ss a'),",
				"          Description = iifNull(Description,toString(null())),",
				"          Description_2 = iifNull(Description_2,toString(null())),",
				"          Unit_of_Measure = iifNull(Unit_of_Measure,toString(null())),",
				"          Quantity = toInteger(iifNull(Quantity,toString(null()))),",
				"          Quantity_Base = toInteger(iifNull(Quantity_Base,toString(null()))),",
				"          Qty_per_Unit_of_Measure = toInteger(iifNull(Qty_per_Unit_of_Measure,toString(null()))),",
				"          Discount_Structure_Code = iifNull(Discount_Structure_Code,toString(null())),",
				"          Unit_Price = toDouble(iifNull(Unit_Price,toString(null()))),",
				"          Unit_Cost_LCY = toDouble(iifNull(Unit_Price,toString(null()))),",
				"          Unit_of_Measure_Code = iifNull(Unit_of_Measure_Code,toString(null())),",
				"          ItemCategry = iifNull(ItemCategry,toString(null())),",
				"          Free_Supply = toInteger(iifNull(Free_Supply,toString(null()))),",
				"          Discount_Structure_Amount = toInteger(iifNull(Discount_Structure_Amount,toString(null()))),",
				"          Conversion_Cost = toInteger(iifNull(Conversion_Cost,toString(null()))),",
				"          PVC_PPR_Cost = toDouble(iifNull(PVC_PPR_Cost,toString(null()))),",
				"          Scheme_Reason = iifNull(Scheme_Reason,toString(null())),",
				"          Tax_Group_Code = iifNull(Tax_Group_Code,toString(null())),",
				"          Excise_Amount = toInteger(iifNull(Excise_Amount,toString(null()))),",
				"          Total_GST_Amount = iifNull(Total_GST_Amount,toString(null())),",
				"          Site = toString(null())) ~> cleaningdata",
				"cleaningdata sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delta',",
				"     fileSystem: ($Container_Name),",
				"     folderPath: ($Folder_Name),",
				"     mergeSchema: false,",
				"     autoCompact: false,",
				"     optimizedWrite: false,",
				"     vacuum: 0,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> salesshipmentlinesink"
			]
		}
	}
}