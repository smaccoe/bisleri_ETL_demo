{
	"name": "Stage2_Sales_Invoice_Line_Full_Load",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Stage2_Sales_Invoice_Line_Full_Load",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "Delta_Full_Load_Folder",
						"type": "LinkedServiceReference"
					},
					"name": "sink1",
					"rejectedDataLinkedService": {
						"referenceName": "Delta_Full_Load_Folder",
						"type": "LinkedServiceReference"
					}
				}
			],
			"transformations": [
				{
					"name": "select1"
				},
				{
					"name": "derivedColumn1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Amount as string,",
				"          {Shipment No_} as string,",
				"          {Shipment Line No_} as string,",
				"          {Amount To Customer} as string,",
				"          {Charges To Customer} as string,",
				"          {GST Base Amount} as string,",
				"          {Total GST Amount} as string,",
				"          {Discount Structure Code} as string,",
				"          {PVC_PPR Cost} as string,",
				"          {Posting Date} as string,",
				"          Site_Code as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source1 select(mapColumn(",
				"          Amount,",
				"          Shipment_No_ = {Shipment No_},",
				"          Shipment_Line_No_ = {Shipment Line No_},",
				"          Amount_To_Customer = {Amount To Customer},",
				"          Charges_To_Customer = {Charges To Customer},",
				"          GST_Base_Amount = {GST Base Amount},",
				"          Total_GST_Amount = {Total GST Amount},",
				"          Discount_Structure_Code = {Discount Structure Code},",
				"          PVC_PPR_Cost = {PVC_PPR Cost},",
				"          Posting_Date = {Posting Date},",
				"          Site_Code",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 derive(Amount = toDouble(Amount),",
				"          Shipment_No_ = iifNull(Shipment_No_, toString(null())),",
				"          Shipment_Line_No_ = toInteger(Shipment_Line_No_),",
				"          Amount_To_Customer = toDouble(Amount_To_Customer),",
				"          Charges_To_Customer = toDouble(Charges_To_Customer),",
				"          GST_Base_Amount = toDouble(GST_Base_Amount),",
				"          Total_GST_Amount = toDouble(Total_GST_Amount),",
				"          Discount_Structure_Code = iifNull(Discount_Structure_Code, toString(null())),",
				"          PVC_PPR_Cost = toDouble(PVC_PPR_Cost),",
				"          Posting_Date = toTimestamp(toString(toTimestamp(Posting_Date,'yyyy-MM-dd HH:mm:ss.SSS','yyyy-MM-dd hh:mm:ss.SSS'),'yyyy-MM-dd hh:mm:ss.SSS')),",
				"          Site_Code = toInteger(Site_Code)) ~> derivedColumn1",
				"derivedColumn1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delta',",
				"     fileSystem: 'delta-lake',",
				"     folderPath: 'Transaction/Full-Load/Sales_Invoice_Line',",
				"     mergeSchema: false,",
				"     autoCompact: false,",
				"     optimizedWrite: false,",
				"     vacuum: 0,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1"
			]
		}
	}
}