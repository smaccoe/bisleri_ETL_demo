{
	"name": "Stage2_Location_Master_DF",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "Transaction_Full_Load_Folder",
						"type": "LinkedServiceReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "Delta_Full_Load_Folder",
						"type": "LinkedServiceReference"
					},
					"name": "sink1",
					"rejectedDataLinkedService": {
						"referenceName": "Delta_Full_Load_Folder",
						"type": "LinkedServiceReference"
					}
				}
			],
			"transformations": [
				{
					"name": "select1"
				},
				{
					"name": "derivedColumn1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Code as string,",
				"          Name as string,",
				"          Address as string,",
				"          {Address 2} as string,",
				"          City as string,",
				"          {Phone No_} as string,",
				"          {Phone No_ 2} as string,",
				"          {Post Code} as string,",
				"          County as string,",
				"          {E-Mail} as string,",
				"          {Country_Region Code} as string,",
				"          {Use As In-Transit} as string,",
				"          {Require Put-away} as string,",
				"          {Require Pick} as string,",
				"          {Use Cross-Docking} as string,",
				"          {Require Receive} as string,",
				"          {Require Shipment} as string,",
				"          {State Code} as string,",
				"          {Subcontracting Location} as short,",
				"          {Subcontractor No_} as string,",
				"          Depot as string,",
				"          Site_Code as short",
				"     ),",
				"     useSchema: false,",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delimited',",
				"     fileSystem: 'data-lake',",
				"     folderPath: 'Master',",
				"     fileName: 'Location_Master_2023-05-10 09:20:21.21.csv',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true,",
				"     multiLineRow: true) ~> source1",
				"source1 select(mapColumn(",
				"          Location_Code = Code,",
				"          Location_Name = Name,",
				"          Address,",
				"          Address_2 = {Address 2},",
				"          City,",
				"          Phone_No = {Phone No_},",
				"          Phone_No_2 = {Phone No_ 2},",
				"          Post_Code = {Post Code},",
				"          County,",
				"          E_Mail = {E-Mail},",
				"          Country_Region_Code = {Country_Region Code},",
				"          Use_As_In_Transit = {Use As In-Transit},",
				"          Require_Put_away = {Require Put-away},",
				"          Require_Pick = {Require Pick},",
				"          Use_Cross_Docking = {Use Cross-Docking},",
				"          Require_Receive = {Require Receive},",
				"          Require_Shipment = {Require Shipment},",
				"          State_Code = {State Code},",
				"          Subcontracting_Location = {Subcontracting Location},",
				"          Subcontractor_No = {Subcontractor No_},",
				"          Depot,",
				"          Site_Code",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 derive(Location_Code = iifNull(Location_Code, toString(null())),",
				"          Location_Name = iifNull(Location_Name, toString(null())),",
				"          Address = iifNull(Address, toString(null())),",
				"          Address_2 = iifNull(Address_2, toString(null())),",
				"          City = iifNull(City, toString(null())),",
				"          Phone_No_ = iifNull(Phone_No, toString(null())),",
				"          Phone_No_2 = iifNull(Phone_No_2, toString(null())),",
				"          Post_Code = iifNull(Post_Code, toString(null())),",
				"          County = iifNull(County, toString(null())),",
				"          E_Mail = iifNull(E_Mail, toString(null())),",
				"          Country_Region_Code = iifNull(Country_Region_Code, toString(null())),",
				"          Use_As_In_Transit = toInteger(Use_As_In_Transit),",
				"          Require_Put_away = toInteger(Require_Put_away),",
				"          Require_Pick = toInteger(Require_Pick),",
				"          Use_Cross_Docking = toInteger(Use_Cross_Docking),",
				"          Require_Receive = toInteger(Require_Receive),",
				"          Require_Shipment = toInteger(Require_Shipment),",
				"          State_Code = iifNull(State_Code, toString(null())),",
				"          Subcontracting_Location = toInteger(Subcontracting_Location),",
				"          Subcontractor_No = iifNull(Subcontractor_No, toString(null())),",
				"          Depot = toInteger(Subcontracting_Location),",
				"          Site_Code = toInteger(Site_Code)) ~> derivedColumn1",
				"derivedColumn1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delta',",
				"     fileSystem: 'delta-lake',",
				"     folderPath: 'Master/Location',",
				"     mergeSchema: false,",
				"     autoCompact: false,",
				"     optimizedWrite: false,",
				"     vacuum: 0,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1"
			]
		}
	}
}