{
	"name": "Stage2_Location_Master_DF_copy1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "Transaction_Full_Load_Folder",
						"type": "LinkedServiceReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "raw_data",
						"type": "LinkedServiceReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "filter1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Code as string,",
				"          Name as string,",
				"          Address as string,",
				"          {Address 2} as string,",
				"          City as string,",
				"          {Phone No_} as string,",
				"          {Phone No_ 2} as string,",
				"          {Post Code} as string,",
				"          County as string,",
				"          {E-Mail} as string,",
				"          {Country_Region Code} as string,",
				"          {Use As In-Transit} as string,",
				"          {Require Put-away} as string,",
				"          {Require Pick} as string,",
				"          {Use Cross-Docking} as string,",
				"          {Require Receive} as string,",
				"          {Require Shipment} as string,",
				"          {State Code} as string,",
				"          {Subcontracting Location} as short,",
				"          {Subcontractor No_} as string,",
				"          Depot as string,",
				"          Site_Code as short",
				"     ),",
				"     useSchema: false,",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delimited',",
				"     fileSystem: 'data-lake',",
				"     folderPath: 'Master',",
				"     fileName: 'Location_2023-05-08 09:32:07.07.csv',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> source1",
				"source1 filter(Code == '.State code:29\"') ~> filter1",
				"filter1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delimited',",
				"     container: 'raw-data',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1"
			]
		}
	}
}