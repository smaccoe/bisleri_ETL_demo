{
	"name": "ParquetRead",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DelimitedText20",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "Parquet6",
						"type": "DatasetReference"
					},
					"name": "source2"
				}
			],
			"sinks": [],
			"transformations": [
				{
					"name": "derivedColumn1"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "join1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Table_Name as string,",
				"          Columns as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source(output(",
				"          Loc_Key as string,",
				"          Location_Code as string,",
				"          Location_Name as string,",
				"          Address as string,",
				"          Address_2 as string,",
				"          City as string,",
				"          Phone_No as string,",
				"          Phone_No_2 as string,",
				"          Post_Code as string,",
				"          County as string,",
				"          E_Mail as string,",
				"          Country_Region_Code as string,",
				"          Use_As_In_Transit as integer,",
				"          Require_Put_away as integer,",
				"          Require_Pick as integer,",
				"          Use_Cross_Docking as integer,",
				"          Require_Receive as integer,",
				"          Require_Shipment as integer,",
				"          State_Code as string,",
				"          Subcontracting_Location as integer,",
				"          Subcontractor_No as string,",
				"          Depot as integer,",
				"          Site_Code as integer,",
				"          site_code as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> source2",
				"source1 derive(Columns = split(replace(replace(replace(replace(replace(replace(Columns, \" \", \"\"),\"(\",\"\"),\")\",\"\"),\"-\",\"\"),\"[\",\"\"),\"]\",\"\"),',')[4]) ~> derivedColumn1",
				"source2 derive(Table_Name = \"Location\") ~> derivedColumn2",
				"derivedColumn2, derivedColumn1 join(derivedColumn2@Table_Name == source1@Table_Name,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1"
			]
		}
	}
}